{"version":3,"sources":["config.js","components/SearchForm.js","components/Photo.js","components/NoResults.js","components/PhotoResults.js","components/Navigation.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["config","SearchForm","handleSearchInput","e","preventDefault","searchTerm","value","props","history","push","sendQuery","currentTarget","reset","className","onSubmit","this","type","ref","input","name","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Photo","src","server","id","secret","alt","title","NoResults","PhotoResults","photos","imageData","imageList","length","map","photo","key","titleTag","loading","Navigation","listen","location","action","pathname","to","NotFound","App","getQueriedTerm","setState","performSearch","query","searchQuery","currentComponent","axios","get","then","response","images","data","catch","error","console","log","state","Fragment","exact","path","render","match","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.833345d8.chunk.js","sourcesContent":["export const config = { apiKey: 'ce5530fbfea9ab200702cfa1acc6e1d8', secret: 'e268579946b5d861'};\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nclass SearchForm extends Component{\n\n  /**\n   * handleSearchInput { event object }\n   *  OnSubmit handler that builds search URL and passes info from SearchForm up to App Component\n   */\n  handleSearchInput = (e) => {\n    \n      e.preventDefault();\n      // Get ref from input\n      let searchTerm = this.searchTerm.value;\n      // Use it to build a path\n      this.props.history.push(`/search/${searchTerm}`);\n      // Pass search term up to parent\n      this.props.sendQuery(searchTerm);\n      // Clear search field when I'm done\n      e.currentTarget.reset();\n  }\n\n  render(){\n    return (\n        <form className=\"search-form\" onSubmit ={this.handleSearchInput}>\n        <input \n            type=\"search\" \n            ref={(input)=>this.searchTerm = input}\n            name=\"search\" \n            placeholder=\"Search\" \n            required/>\n        <button type=\"submit\" className=\"search-button\">\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          </svg>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(SearchForm);","import React from 'react';\n\nconst Photo = (props)=>{\n    return (\n        <li><img src={`https://farm5.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`} alt={props.title}/></li>       \n    );\n}\n\nexport default Photo;","import React from 'react';\n\nconst NoResults = () =>{\n    return(\n        <li className=\"not-found\">\n        <h3>No Results Found</h3>\n        <p>Your search did not return any results. Please try again.</p>\n      </li>\n    );\n}\n\nexport default NoResults;","import React from 'react';\nimport Photo from './Photo';\nimport NoResults from './NoResults';\n\nconst PhotoResults = (props) =>{\n\n  // Get the images list from the props\n  const imageData = props.imageList;\n  \n  // Set up variable for the rendered components\n  let photos;\n\n  // If there's image Data, render it into the correct component structure\n  if(imageData.length > 0){\n    photos = imageData.map((photo) => {\n        return <Photo \n          id={photo.id}\n          key={photo.id}\n          title={photo.title}\n          secret={photo.secret}\n          server={photo.server}\n        />\n      }); \n  // If there isn't data, show the error\n  } else {\n    photos = <NoResults />\n  }\n\n  return (\n    <div className=\"photo-container\">\n        <h2>Results in \"{props.titleTag}\"</h2>\n        <ul>\n        { \n          //Check to see if results are loaded\n          (props.loading)\n          // If results aren't back, show a loader\n          ? <li className=\"loader\"><p>Loading...</p></li>\n          // If they are, load the photos\n          : photos\n        }\n      </ul>\n    </div>\n  );\n}       \n \nexport default PhotoResults;","import React, {Component} from 'react';\nimport {\n  NavLink,\n  withRouter\n} from 'react-router-dom';\n\n\nclass Navigation extends Component{\n\n  /**\n   * When the navigation mounts, pass the loaded path back to App.js vis sendQuery so it can fetch correct data\n   * @param {OBJ} this.props \n   */\n  componentDidMount(props){\n    this.props.history.listen((location, action) => {\n     // console.log(this.props.history.location.pathname); // this is sending back a weird path including search when i complete a search\n      this.props.sendQuery(this.props.history.location.pathname);\n    });\n  }\n  \n  render(){\n    return (\n      <nav className=\"main-nav\">\n        <ul>  \n          <li><NavLink to='/pug'>Pug</NavLink></li>\n          <li><NavLink to='/brussel-griffon'>Brussel Griffon</NavLink></li>\n          <li><NavLink to='/weiner-dog'>Weiner Dog</NavLink></li>\n      \n        </ul>\n      </nav>\n    );\n  }  \n}\n\nexport default withRouter(Navigation);","import React from 'react';\n\nconst NotFound = () =>{\n    return(\n        <div className=\"photo-container\">\n            <ul>\n            <li className=\"not-found\">\n                <h3>404</h3>\n                <p>Sorry, this page was not found.</p>\n            </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default NotFound;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport {config} from './config';\nimport {\n  Route,\n  BrowserRouter,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\nimport './App.css';\n\n// App Components\nimport SearchForm from './components/SearchForm';\nimport PhotoResults from './components/PhotoResults';\nimport Navigation from './components/Navigation';\nimport NotFound from './components/NotFound';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [],\n      query: 'pug', // Pug is default page term\n      loading: true\n    }\n  }\n\n  componentDidMount(){  \n    this.performSearch(this.state.query); //on initial load, fetch either the default pug data or whatever is currently in state\n  }\n\n  /**\n   * getQueriedTerm {string}\n   * Gets the value of this.props.sendQuery from search and nav components\n   */\n  getQueriedTerm = (searchTerm) => {\n    // Update state and run the query with this search term\n    this.setState({loading: true});\n    this.performSearch(searchTerm);\n    this.setState({query: searchTerm});\n  }\n\n  /**\n   * performSearch {string}\n   * Uses the value of the search term to complete an API call via axios\n   */\n  performSearch = (searchQuery) =>{\n    // rename 'this' to avoid naming collisions\n    let currentComponent = this;\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${config.apiKey}&tags=${searchQuery}&per_page=24&format=json&nojsoncallback=1`)\n      .then(function (response) {\n       currentComponent.setState({\n         // when data is received, update state\n          images: response.data.photos.photo,\n          loading: false\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n      <BrowserRouter>\n        <React.Fragment>\n          <SearchForm sendQuery = {this.getQueriedTerm} />\n          <Switch>\n            <Route exact path='/' render={()=> <Redirect to='/pug' /> }/>\n            <Route path='/pug' render={\n                ({match})=>\n                  <React.Fragment>\n                    <Navigation sendQuery={this.getQueriedTerm} match={match} />\n                    <PhotoResults loading={this.state.loading} titleTag={'Pug'} imageList={this.state.images}/>\n                  </React.Fragment>\n            } />\n            <Route path='/brussel-griffon' render={\n                ({match})=>\n                  <React.Fragment>\n                    <Navigation sendQuery={this.getQueriedTerm} match={match} />\n                    <PhotoResults loading={this.state.loading} titleTag={'Brussel Griffon'} imageList={this.state.images}/>\n                  </React.Fragment>\n            } />\n            <Route path='/weiner-dog' render={\n                ({match})=>\n                  <React.Fragment>\n                    <Navigation sendQuery={this.getQueriedTerm} match={match} />\n                    <PhotoResults loading={this.state.loading} titleTag={'Weiner Dog'} imageList={this.state.images}/>\n                  </React.Fragment>\n            } />\n            <Route path='/search/:topic' render={\n              ({match})=>\n                  <React.Fragment>\n                    <Navigation sendQuery={this.getQueriedTerm} match={match} />\n                    <PhotoResults loading={this.state.loading} titleTag={this.state.query} imageList={this.state.images}/>\n                  </React.Fragment>\n            } />\n            <Route render={NotFound}/>\n          </Switch>\n        </React.Fragment>\n      </BrowserRouter>\n    </div>\n    );\n  };\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}